name: Dependency Released CI

on:
  workflow_call:
    inputs:
      github-ref:
        required: true
        type: string
      version:
        required: false
        type: string
      token:
        required: true
        type: string
      user-name:
        required: true
        type: string
    secrets:
      REPO_SSH_KEY:
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 17.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        token: ${{ inputs.token }}

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with: 
        key: ${{ secrets.REPO_SSH_KEY }}
        name: id_ed25519
        known_hosts: unnecessary
        if_key_exists: replace

    # Install npm for the given node.js version
    - name: Build for Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Setup app
      run: npm ci

    - name: Upgrade dependency to latest (main)
      if: ${{ inputs.version == null }}
      run: npm install ${{ inputs.github-ref }}

    - name: Upgrade dependency to specific version
      if: ${{ inputs.version != null }}
      run: npm install ${{ inputs.github-ref }}#${{ inputs.version }}
    
    - name: Test the app
      uses: ospfranco/gh-jester@latest
      with:
        post-comment: true
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_CONTEXT: ${{ toJson(github) }}

    # Upload the test results
    - name: Upload code-coverage artiface
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage
        path: coverage/lcov-report

    # If testing is succesfull, upload the updated package.json and package-lock.json
    - name: Update package and lock for latest of dependency
      if: ${{ success() && inputs.version == null }}
      run: |
        git config --global user.name "${{ inputs.user-name }}"
        git add package.json
        git add package-lock.json
        git commit -m "Updated package and package-lock after dependency update ${{ inputs.github-ref }}#main"
        git push

    - name: Update package and lock for specific version of dependency
      if: ${{ success() && inputs.version != null }}
      run: |
        git config --global user.name "${{ inputs.user-name }}"
        git add package.json
        git add package-lock.json
        git commit -m "Updated package and package-lock after dependency update ${{ inputs.github-ref }}#${{ inputs.version }}"
        git push